from datetime import date

"""
Django settings for safeguard project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path, os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "default")
# For encrypt service
ENCRYPT_KEY = os.environ.get(
    "ENCRYPT_KEY", "RbTNxIcafhCkSSz6gNjwx_awBFH7glb8JVXQnvcS_5A="
)
# SMS Keys
SMS_ACCOUNT = os.environ.get(
    "SMS_ACCOUNT", "")
SMS_TOKEN = os.environ.get("SMS_TOKEN", "")
SMS_SERVICE_ID = os.environ.get(
    "SMS_SERVICE_ID", "")
TWILIO_ADDR = os.environ.get("TWILIO_ADDR", "")
SMS_RECEIVE_UPDATE_URL = os.environ.get("SMS_RECEIVE_UPDATE_URL", "")


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["0dd7-45-87-214-82.ngrok.io", "localhost"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # custom
    "customauth",
    "content",
    # Thirds
    "rest_framework",
    "corsheaders",
    "django_rest_passwordreset",
    "knox",
]


MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "content.business.logging.handler.APILoggerMiddleware",
]

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

ALLOWED_IP = ["127.0.0.1", "localhost"]

DCS_SESSION_COOKIE_SAMESITE = None
DCS_SESSION_COOKIE_SAMESITE_FORCE_CORE = False
DCS_SESSION_COOKIE_SAMESITE_FORCE_ALL = False

AUTH_USER_MODEL = "customauth.CustomUser"

ROOT_URLCONF = "safeguard.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 100,
    "DEFAULT_AUTHENTICATION_CLASSES": ("knox.auth.TokenAuthentication",),
    "DEFAULT_RENDERER_CLASSES": (
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
        "drf_excel.renderers.XLSXRenderer",
    ),
    # 'EXCEPTION_HANDLER': 'content.business.exceptions.Handler.custom_exception_handler',
}

WSGI_APPLICATION = "safeguard.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    "default": {
        # MySQL engine. Powered by the mysqlclient module.
        "ENGINE": "django.db.backends.mysql",
        "NAME": os.environ.get("DB_NAME", "safeguard"),
        "USER": os.environ.get("DB_USER", "root"),
        "HOST": os.environ.get("DB_HOST", ""),
        'PASSWORD': os.environ.get('DB_PASS', 'default'),
        "PORT": os.environ.get("DB_PORT", "3306"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_TZ = False

# AUTH_USER_MODEL = "customauth.CustomUser"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, ""),
]

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = os.environ.get("EMAIL_HOST", "default")
EMAIL_PORT = os.environ.get("EMAIL_PORT", "default")
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER", "default")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD", "default")
EMAIL_USE_TLS = True

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": ">>> {levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{asctime} {levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file": {
            "level": "INFO",
            "filename": f"./logs/info/info-{date.today().strftime('%Y-%m-%d')}.log",
            "formatter": "simple",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "when": "midnight",
            "interval": 1,
        },
        "errors": {
            "level": "ERROR",
            "filename": f"./logs/errors/errors-{date.today().strftime('%Y-%m-%d')}.log",
            "formatter": "verbose",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "when": "midnight",
            "interval": 1,
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file", "errors"],
            "level": "INFO",
            "propagate": True,
        },
    },
}
